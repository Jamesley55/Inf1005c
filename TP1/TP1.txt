1 – Orthogonal : Écrire un algorithme qui détermine si deux vecteurs à deux dimensions sont orthogonaux ou
non. Note : utiliser un produit scalaire ; les opérations sur les vecteurs, dont le produit scalaire, ne sont pas
des opérations élémentaires disponibles pour l’algorithme raffiné.
Exemple : L’utilisateur entre les composantes des vecteurs (1 ; 0,5) et ( -1 ; 2 )
L'affichage attendu est : Les vecteurs sont orthogonaux.


a)
Demander les deux veceurs à l'usager. Lire les composantes des deux vecteurs.
Si le produit scalaire est nul, afficher que les deux vecteurs sont orthogonaux, sinon ils ne le sont pas.



b) 
Afficher <<Veuillez entrer la coordonnées en x du premier vecteur>>
Lire x
a = x
Afficher <<Veuillez entrer les coordonnées en y du premier vecteur>>
Lire y 
b = y 
Vect1=(a,b)
Afficher <<Veuillez entrer la coordonnées en x du second vecteur>>
Lire x 
c = x
Afficher <<Veuillez entrer la coordonnées en y du second vecteur>>
Lire y 
d = y
Vect2=(c,d)

Produit = (a*c) + (b*d)
SI Produit ==  0 ALORS
	Afficher <<Ces deux vecteurs sont orthogonaux>>
SINON
	Afficher <<Ces deux vecteurs ne sont pas orthogonaux>>







2 – Pythagore. L’algorithme devra demander et lire 3 nombres. Ensuite, il vérifiera si ces 3 nombres
satisfont le théorème de Pythagore, i.e. que le 3e
 nombre est bien l’hypoténuse pour les 2 autres nombres. Si
ce n’est pas le cas, il redemandera et relira 3 nombres jusqu’à ce que le théorème soit respecté.

a) 
Demander a l'utilisateur de saisir trois nombre 
Lire les nombres saisis
Comparer le carré du troisième nombre avec la somme des carrés des deux premiers 
Afficher si la comparaison respecte le théorême de Pythagore


b) 

nombre1 = 0
nombre2 = 0
nombre3 = 0 

TANT QUE racine_carrée(nombre1^2 + nombre2^2) != nombre3 Faire 

    Afficher <<Veuillez saisir un premier nombre saisi1 >>

    Lire saisi1
    nombre1 = saisi1

    Afficher <<Veuillez saisir un second nombre  saisi2 >>

    Lire saisi2
    nombre2 = saisi2

    Afficher <<Veuillez saisir un troisieme nombre saisi3 >>

    Lire saisi3
    nombre3 = saisi3

Afficher << le théorème est respecté >> 




3 – Suite : Demander à l’utilisateur de saisir un entier n strictement positif (et lui redemander jusqu’à ce qu’il
ait bien entré un nombre strictement positif, mais vous n’avez pas à vérifier que c’est un entier) puis une suite
de n entiers. Afficher la longueur de la plus grande suite croissante.
Exemple : Pour n=10 et la suite 10,1,3,4,5,9,5,8,2,1 le programme affiche 5.



a)
Entrer un entier positif <<n>> indiquant le nombre d'éléments de la suite
Lire le nombre saisi puis demander à l'utilisateur de saisir une suite d'entiers de <<n>> éléments.
Lire la suite saisie et afficher la longueur de la plus grande suite croissante.

b)
Afficher << Veuillez saisir un entier positif>>

Lire nombre

TANT QUE nombre < 0 FAIRE
    Afficher << Veuillez svp entrer un entier POSITIF>>

i=0
Tableau=[]
TANT QUE i < nombre FAIRE
    Afficher <<Saisir un entier>>
    Lire entier
    Tableau[i]= entier
    SI i >=1 FAIRE
        SI Tableau[i]>Tableau[i-1] FAIRE
            Longueur = Longueur + 1
 
    SI Longueur > plusGrandeLongeurExistance Faire 
        plusGrandeLongeurExistance = longueur

    i=i+1

Afficher plusGrandeLongeurExistance




4 – Recherche : Écrire une fonction dont le résultat est la position où se trouve le texte « INF » dans une
phrase qui lui est passée ; elle doit avoir le résultat -1 dans le cas où il n’y est pas. La position résultante doit
être celle où se trouve la première lettre du « INF » dans la phrase, la position zéro étant la première lettre de
la phrase.
Note : chaque caractère compte comme une position, incluant les espaces et les ponctuations. La fonction
« longueur de (phrase) » permet de connaître le nombre de caractères dans la phrase (voir exemple en p.1).
Exemple : La phrase passée à la fonction est «J’ai un cours d’INF1005C », le résultat attendu est 16.



a) 
Demander à l'utilisateur de saisir une phrase comprenant INF
Lire la phrase saisie
Rechercher le caratère I à partir duquel on trouve la chaine de caractères INF
Indiquer la position de ce I

b)

Afficher <<Saisir une phrase contenant le texte INF>>
Lire <<phrase saisie>>
Phrase=<<phrase saisie>>
Inf=<<INF>>
i=0
Position=0
TANT QUE i<longueur_de Phrase FAIRE
    temp=i
    j=0
    TANT QUE j<longueur de Inf
        SI Inf[j]=Phrase[temp]
            Position=Position+1
        j=j+1
        temp=temp+1
    SI Position=longueur de Inf
        Afficher i
        Afficher <<Voilà>>
    SINON
        Position=0
    i=i+1



5 – Distance à l’origine en 3D. Demander et lire plusieurs points de coordonnées (x, y , z). À chaque
nouveau point entré, indiquer s’il est plus près de l’origine (0, 0, 0) que tous les points précédemment entrés.
Définissez une fonction pour obtenir la distance du point à l’origine. Votre programme doit calculer une seule
fois la distance de chaque point entré par l’usager.

a)
Demander à l'usager de saisir les coordonnées d'un point
Lire les coordonnées entrées
Comparer la position du dernier point saisi aux précédentes
Indiquer la position relative du dernier point entré

b)







6 – Racine carrée : Écrire un algorithme pour calculer la racine carrée d’un nombre réel positif x. La
méthode sera d’utiliser la série définie comme :
y0 = x
yn+1 = (yn + x / yn) / 2
Lorsque n tend vers l’infini, cette série converge vers la racine carrée de x. L’estimation de l’erreur au terme
yn, par rapport à la véritable racine carrée, sera en = | yn – yn-1 | (soit la valeur absolue de la différence entre
deux termes qui se suivent dans la série). L’algorithme doit arrêter, et afficher la valeur de yn, dès que cette
erreur estimée est inférieure à epsilon.
Note : la valeur absolue n’est pas une opération élémentaire disponible pour l’algorithme raffiné.
Exemple : L’utilisateur entre les valeurs de x et epsilon comme étant 2 et 0,01.
L’affichage attendu est : La racine de 2 est approximativement 1,414215686.
Dans cet exemple, les valeurs des y sont : y0 = 2 ; y1 = 1,5 ; y2 = 1,41666666 ; y3 = 1,414215686. La différence
entre y3 et y2 est de ~0,002, qui est inférieur au epsilon de 0,01, d’où l’affichage de la valeur de y3 comme
approximation acceptée de la racine de 2. 




a)


b)
